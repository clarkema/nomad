" vim: set foldlevel=0 foldmethod=marker:

"==========================================================================
" Various bits and bobs here
"==========================================================================

" Fundamentals {{{1
"
" Behave more like vim and less like vi. This setting should be the first
" in the file
set nocompatible

runtime bundle/vim-pathogen/autoload/pathogen.vim

set modeline
set hidden

set formatoptions=tcorqnl2
set noequalalways     " Don't automatically re-arrange my windows for me
set scrolloff=3       " Avoid working at screen edges.

set listchars=tab:»·,trail:·,extends:@,precedes:@
set backspace=2       " Allow backspacing over overthing.
set showcmd           " Show partial commands as they are typed
set number
set history=1000

set autoread
set autowrite

let mapleader = ","
let maplocalleader = "\\"

" Pathogen {{{1
if ! exists("g:pathogen_disabled")
    let g:pathogen_disabled = []
endif

if ! has('python')
    call add(g:pathogen_disabled, 'ultisnips')
endif

if ! has('ruby')
    call add(g:pathogen_disabled, 'vim-lusty')
endif

call pathogen#infect()
filetype plugin indent on

" Status line {{{1
" Note that spaces must be escaped!
"set statusline=%\n\ %f\ %m%r\ \ %y%=\ L%-5.5l\ C%-3.3v\ %3.3p%%\ \ 
set laststatus=2      " Always show the status line defined below
set statusline=%n\ %f\ %m%r\ \ 
set statusline+=%{tagbar#currenttag('[%s]\ ','','s')}

" Completion {{{1
set wildmenu
set wildmode=longest,list
set ofu=syntaxcomplete#Complete

" Dictionary for use with ^X^K
if has( "unix" )
    set dictionary=/usr/share/dict/words
end

" UltiSnips {{{1
let g:UltiSNipsNoPythonWarning = 1

" GUI options {{{1
set guioptions=aciegr " Text-only GUI with scrollbars and icons
set guicursor=a:block-blinkwait0-Cursor/lCursor " Xterm-style block cursor

let g:tex_fold_enabled              = 1 " Syntax folding

" Searching {{{1
set incsearch
set hlsearch
" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

" Undo {{{1
"silent !mkdir -p $HOME/.vim/backups > /dev/null 2>&1
if has ( "persistent_undo" )
    set undodir=~/.vim/backups
    set undofile
end

" Syntastic {{{1
let g:syntastic_enable_signs=1
let g:syntastic_enable_balloons=1
let g:syntastic_phpcs_conf="--standard=/Users/clarkema/rules/moodle-local_codechecker/moodle"
if has ( "balloon_eval" )
    set ballooneval
end
"let g:syntastic_quiet_warnings=1

" Spellchecking {{{1
if v:version >= 700
    set spelllang=en_gb
end

" Indenting and tabs {{{1
set autoindent
set smartindent  " Indent each line the same as the last, unless it contains { or }

filetype indent on     " Smart indent files according to type

" Tab options - indents are 4 spaces, other tabs are 4
set shiftwidth=4
set tabstop=4
set expandtab
set smarttab
set shiftround        " make >> work in sections

inoremap Oq 1
inoremap Or 2
inoremap Os 3
inoremap Ot 4
inoremap Ou 5
inoremap Ov 6
inoremap Ow 7
inoremap Ox 8
inoremap Oy 9
inoremap Op 0

" Cursor {{{1
if exists( "&cursorline" )
    noremap <silent> gc :set cursorline!<CR>:set cursorcolumn!<CR>
    inoremap <silent> <Leader>gc <C-O>:set cursorline!<CR><C-O>:set cursorcolumn!<CR>
endif

" Session options {{{1
if v:version >= 600
    "set sessionoptions=blank,buffers,curdir,folds,help,globals,options,winpos,resize,winsize,unix,tabpages
    set sessionoptions=blank,buffers,curdir,folds,help,globals,options,unix,tabpages,winsize
    set viminfo='1000,f1,<500,h,%
endif

set matchpairs=<:>,{:},(:)

" Mappings and abbreviations {{{1

" disable help and map F1 to toggle search highlights instead
noremap <S-F1> :se hls!
noremap! <S-F1> :se hls!
" F2 = show / hide invisible characters
noremap <S-F2> :se list!
noremap! <S-F2> :se list!
" F3 = spellchecking on / off
noremap <S-F3> :se spell!
noremap! <S-F3> :se spell!
" F10 = Save And Make
noremap <S-F10> :w:make
noremap! <S-F10> :w:make
" F11 = Save
noremap <S-F11> :w
noremap! <S-F11> :w
" F12 = Save And Exit
noremap <S-F12> :wq
noremap! <S-F12> :wq

" Enter in normal mode inserts a blank line
nnoremap <CR> o<ESC>
" DEL in normal mode deletes the current line
nnoremap <DEL> dd

" Window resize shortcuts
noremap <S-Up> +
noremap <S-Down> -
noremap <S-Left> <
noremap <S-Right> >

" Vim options
ab vimstuff vim: shiftwidth=4:tabstop=8:smarttab

" Copied from vimcasts for editing a file relative to the current one.
cnoremap %% <C-R>=expand('%:h').'/'<cr>


" Commands {{{1
if has("user_commands")
    command! Bash set filetype=sh | normal gg!!which bashI#!
    command! Perl set filetype=perl | normal gg!!which perlI#!A -w
    command! Python set filetype=python | normal gg!!which pythonI#!
endif

" Autocommands {{{1
if has("autocmd")

autocmd!

" Individual files {{{2
au BufRead .vimmain set filetype=vim

" HTML-like markup {{{2

au FileType html,xml map <F3> I<td>A</td>   " put <td>s around a line
au FileType html,xml map <F7> A<br>j

" Perl {{{2
au BufRead *.cgi set filetype=perl

au FileType perl let perl_extended_vars=1
au FileType perl let perl_fold=1
au FileType perl inoremap <buffer> ;f =>
au FileType perl inoremap <buffer> ;a ->
au FileType perl inoremap <buffer> ;h ->{'
au FileType perl inoremap <buffer> ;j '}
au FileType perl inoremap <buffer> ;; ;

" CoffeeScript {{{2
au FileType coffee set sw=2 isk+=$
au FileType coffee inoremap <buffer> ;f =>
au FileType coffee inoremap <buffer> ;a ->
au FileType coffee inoremap <buffer> ;; ;

" Erlang {{{2
au FileType erlang let g:erlang_folding=1

" C {{{2
au BufRead *.ino set filetype=c " Treat Arduino source as C
au FileType c,cpp setl cindent

"au FileType gitcommit DiffGitCached | wincmd p
au FileType gitcommit set tw=68 spell

" Ruby {{{2
au FileType ruby setl list
au FileType ruby let ruby_fold = 1
"au FileType ruby let ruby_space_errors = 1

endif

" Editing vimrc {{{1
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Misc {{{1

colorscheme solarized

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
    runtime! macros/matchit.vim
endif
