#! /usr/bin/env perl

use warnings;
use strict;

sub desired_theme {
    # Is an eink monitor connected?
    `miractl detect`;
    if ($? == 0) {
        # There's a Mira e-ink monitor connected to the system; we should use
        # the eink theme
        return "eink";
    } else {
        # No e-ink monitor found.  If the current theme is e-ink, set to dark;
        # otherwise toggle dark/light

        my $current;
        my $file = "$ENV{HOME}/.config/kitty/kitty.conf";
        our @ARGV = ($file);
        while (<ARGV>) {
            if (/Gruvbox (\w+)/)  {
                $current = lc($1);
            }
        }
        return $current eq "dark" ? "light" : "dark";
    }
}

sub set_kitty_theme {
    my $target = shift;
    my $file = "$ENV{HOME}/.config/kitty/kitty.conf";
    return unless -f $file;

    my %themes = (
        eink => "Eink",
        dark => "Gruvbox Dark",
        light => "Gruvbox Light",
    );

    # Kitty's built-in theme switcher causes problems when offline; even
    # when caching is disabled it requires a connection the first time it's run.
    # Instead we'll just juggle symlinks manually.
    my $current_link = "$ENV{HOME}/.config/kitty/current-theme.conf";
    unlink($current_link);
    symlink("$ENV{HOME}/.config/kitty/themes/$themes{$target}.conf",
            $current_link);
    qx'kill -USR1 $(pgrep kitty)';
}

sub set_nvim_theme {
    my $target = shift;
    my $file = "$ENV{HOME}/.config/nvim/init.vim";
    return unless -f $file;

    our $^I = '*';
    our @ARGV = ($file);
    
    while (<ARGV>){
       s/^(se bg=).*$/$1$target/;
       print;
    }
    
    my $current_user = $ENV{USER};
    my $uid = $<;
    
    while (my $server = glob "/run/user/$uid/nvim*") {
        my $user = getpwuid((lstat($server))[4]);
        next unless $user eq $current_user;

        system("nvim --server $server --remote-send '<C-\\><C-n>:se bg=$target<CR>'");
    };
}

sub set_emacs_theme {
    my $target = shift;
    system(qq{emacsclient -e "(theme '$target)" 2> /dev/null});
}

sub set_bat_theme {
    my $target = shift;
    my $file = `bat --config-file`;
    chomp $file;
    return unless $file && -f $file;

    my %themes = (
        eink => "gruvbox-light",
        dark => "gruvbox-dark",
        light => "gruvbox-light",
    );

    our $^I = '*';
    our @ARGV = ($file);
    
    while (<ARGV>){
       s/--theme="[-\w]+"/--theme="$themes{$target}"/;
       print;
    }
}

sub set_zathura_theme {
    my $target = shift;
    my $file = "$ENV{HOME}/.config/zathura/zathurarc";
    return unless $file && -f $file;

    my %themes = (
        eink => "zathura-gruvbox-light",
        dark => "zathura-gruvbox-dark",
        light => "zathura-gruvbox-light",
    );

    our $^I = '*';
    our @ARGV = ($file);

    while (<ARGV>){
       s/include zathura-gruvbox-\w+/include $themes{$target}/;
       print;
    }
}

sub set_shell_theme {
    my $target = shift;
    umask 0077;

    my $state_file = $ENV{NOMAD_COLOUR_STATE_FILE};
    unless ($state_file) {
        warn "NOMAD_COLOUR_STATE_FILE environment variable not set; skipping shell configuration\n";
        return;
    }

    open my $fh, '>', $state_file or die "Cannot write to $state_file: $!\n";
    print $fh "$target\n";
    close $fh;
}

sub set_theme {
    my $target = shift;
    set_kitty_theme($target);
    set_nvim_theme($target);
    set_emacs_theme($target);
    set_bat_theme($target);
    set_zathura_theme($target);
    set_shell_theme($target);
}

my $target = shift || desired_theme;
set_theme($target);
